			 #########
######## SETUP ###############################################################
			 #########

# Constants
:const upKey			 		 5
:const fireLaserKey		 6
:const shipInitX			30
:const shipInitY			26
:const shipSpeedLimit 24	# Lower is faster
:const maxRocks		 		16
:const rkSpacing   		 6	# Min pixels between spawns
:calc  maxRckIndex	 { 2 * maxRocks }
:const rockSpeedLimit 56	# Lower is faster
:const laserLimit			16 	# Time between laser firings in 60ths of a second
:const laserViewTime	 2 	# Time before laser is erased in 60ths of a second

# Rock registers
:alias rockX			v0
:alias rockY			v1
:alias rksNeeded  v2
:alias rockDelay	v3
:alias rockOldY		v4
:alias rockIndex	v5
:alias rockOffset	v6

# Registers for ship movement
:alias movHrz			v2
:alias movVrt			v3
:alias dirVal			v4
:alias arrowCheck	v5
:alias keyLeft		v6
:alias keyRight		v7
:alias keyUp			v8
:alias keyDown		v9

# Registers for ship weapons
:alias lsrHitPtrn	v0
:alias laserTemp	v1
:alias laserX			v6
:alias laserY			v7
:alias lsrHitY		v8
:alias lsrHitY2		v9

# Movement speed limiters
:alias rockItr		va
:alias shpItr			vb
# Player ship state
:alias flameState	vc
:alias shipX			vd
:alias shipY			ve


: initGame
	# Globals
	rockItr			:= 0
	shpItr			:= 0
	flameState	:= 0
	shipX				:= shipInitX
	shipY				:= shipInitY

	# Ship
	movHrz			:= 0
	movVrt			:= 0
	dirVal			:= 0
	arrowCheck	:= 0
	keyLeft			:= 7
	keyRight		:= 9
	keyUp				:= 5
	keyDown			:= 8
	# Save ship defaults
	i := movement-registers
	save v9
	# Draw ship in start position
	i := ship-test
	sprite shipX shipY 8	
	
	# Rocks
	rockX				:= 0
	rockY				:= 0
	rksNeeded 	:= maxRocks
	rockDelay		:= rkSpacing
	rockOldY		:= 0
	rockIndex		:= 0
	rockOffset	:= 32
	# Save rock defaults
	i := rock-registers
	save v6
	
	# Weapons
;


			 ########
######## MAIN ###############################################################
			 ########


: main
	initGame
	loop
		# Handle ship movement and fire
		playerShip			
		# Spawn and scroll rocks
		playField
	again


: playerShip
	# Blink thruster flame when UP is pressed
	shipThrust
	# Ship weapons fire
	shipFire
	# Handle ship movement
	shipMove
;


# Spawn and move objects
: playField
	# Increment rock speed limit counter
	rockItr += 1
	# Check if time to process rocks
	if rockItr != rockSpeedLimit then return
	# Reset counter
	rockItr := 0
		
	# Load registers
	# v0 and v1 are overwritten with XY array data
	# v2 and v3 must be kept track of
	# v4 ... v6 load with default values
	i := rock-registers
	load v6
		
	# Spawn new rock
	rockSpawn
	# Move existing rocks
	rocksMove
	
	# Save registers
	i := rock-registers
	# Only v2 and v3 need saved
	save v3
;


			 #########
######## ROCKS ###############################################################
			 #########


:macro mvMacro arrayAddr {
	:unpack 0xA arrayAddr		# Put value for [i := xyarray] instruction into v0 and v1
	rocksMoveByType					# Move all rocks of this type one pixel down
}


# Scroll all rocks one pixel down, one type at a time
: rocksMove
	# Check if there are any rocks to move
	if rksNeeded == maxRocks then return
	# Macro for each type puts instruction in v0/v1 and calls function
	mvMacro dodge-xys
	mvMacro shoot-xys
	mvMacro catch-xys
;


: rocksMoveByType
	# v0 and v1 contain an instruction
	# Set i to location instruction is needed
	i := mvSeti 		
	# Save instruction there
	save v1									
	# Reset
	rockIndex := 0
	rockOffset := 32
	# Iterate each array element
	loop
		# Set i to XY array for current rock type
		: mvSeti 0x00 0x00
		# Increment to next element
		i += rockIndex
		# Load X into v0 and Y into v1
		load v1
		# If rockY is 0 no rock exists in this slot
		if rockY == 0 then jump rocksMvNext
		# Copy rockY value before incrementing
		rockOldY := rockY
		# Increment and save rockY before changing i
		rockY += 1
		# Save updated value
		save v1
		# Increment i by rockOffset to locate sprite for current rock type
		i += rockOffset
		# Draw over rock to erase
		sprite rockX rockOldY 4
		# Check for rollover from 255 to 0, that indicates rock has scrolled off screen
		if rockY == 0 begin
			# Flag new rock for spawn
			rksNeeded += 1
			jump rocksMvNext
		end
		# Draw rock in updated location
		sprite rockX rockY 4
		# Check for collision
		#

		# Prepare to check next array slot
		: rocksMvNext
		rockIndex += 2
		# Offset reduces as we go down array
		rockOffset -= 2
		# Check if end of array
		if rockIndex != maxRckIndex then
	again
;			 
			 

: rockSpawn
	# Don't exceed limit
	if rksNeeded == 0 then return
	# Delay rock spawns a minimum of rock sprite height to avoid overlap
	rockDelay -= 1
	if rockDelay != 0 then return
	# Reset delay counter
	rockDelay := rkSpacing
	# Offset for locating sprite data x bytes after matching XY array
	#rockOffset := 32
	# Select random number 0 - 7
	v0 := random 0b00000111
	# Double number for 2 byte instructions
	v0 += v0
	# Double again for two instructions
	v0 += v0
	# Jump into table with random number as index
	jump0 rockSpawnTable
	# Random chance to not spawn a rock reduces clumping
: rockSpawnTable
	return return										# 0 - 2/8 = return without spawn
	return return										# 1
	i := dodge-xys jump rockInit		# 2 - 3/8 = spawn a dodge rock
	i := dodge-xys jump rockInit		# 3
	i := dodge-xys jump rockInit		# 4
	i := shoot-xys jump rockInit		# 5 - 2/8 = spawn a shoot rock
	i := shoot-xys jump rockInit		# 6
	i := catch-xys jump rockInit		# 7 - 1/8 = spawn a catch rock
: rockInit
	# Amount to increase i for each iteration
	rockIndex := 2
	# Search thru array for first Y = 0
	loop
		# Load data v0 = X and v1 = Y
		load v1
		# rockY > 0 a rock exists in this slot
		if rockY != 0 begin
			# Next slot
			i += rockIndex
			# Update offset, as i goes up offset goes down
			rockOffset -= rockIndex
			# Check if end of array
			if rockIndex == maxRckIndex then handleError
			# Restart loop here
			again	
		end
	# Found slot with rockY set to 0
	rksNeeded -= 1
	# Set rockX to random location 1 - 59
	rockX := random 0b00111111
	if rockX == 0 then rockX := 1
	if rockX > 59 then rockX := 59
	# Set rockY to top of screen
	#  use 224 instead of 0 to rollover when rock gets to bottom of screen
	rockY := 224
	# Save values to array
	save v1
	# Set i to sprite for this rock type
	i += rockOffset
	# Draw sprite
	sprite rockX rockY 4		
;


			 ########
######## SHIP ###############################################################
			 ########


# Handle ship movement
: shipMove
	# increment
	shpItr += 1
	# Limit movement speed - increase number to slow down ship
	if shpItr != shipSpeedLimit then return
	# Reset
	shpItr := 0

	# Load registers
	i := movement-registers
	load v9
	# No horizontal arrow keys will result in a movement value of 0
	# Both horizontal keys will also result in a movement value of 0
	# One horizontal key will result in a movement value of -1 or +1 (up or down)
	# Ditto for vertical: 0 or -1 or +1 (na or left or right)
	# Horizontal
	if keyLeft key begin 
		 if shipX != 0 then movHrz += 255
	end
	if keyRight key begin
		if shipX != 59 then movHrz += 1
	end
	if movHrz != 0 then arrowCheck += 1
	# Vertical
	if keyUp key begin
		if shipY != 0 then movVrt += 255
	end
	if keyDown key begin
		if shipY != 27 then movVrt += 1
	end
	if movVrt != 0 then arrowCheck += 1
	# Return if no valid arrow key combination pressed
	# Will be zero for: no keys, all 4 keys, both vrt (no hrz), both hrz (no vrt)
	# Three key presses will cancel one direction out and behave as a single key
	# Single key presses will pass, as will two with one hrz / one vrt
	if arrowCheck == 0 then return
	
	# Erase thruster flame before moving ship
	# Do now to avoid needing variables for flame position
	if flameState == 1 begin
		i := flame
		sprite shipX shipY 8
		flameState := 0
	end
	
	# Update position: add or subtract 1 from one or both vars
	shipX += movHrz
	shipY += movVrt
	# Use the direction value as an offset to sprite table
	# dirVal is x8 for 8 byte sprites
	if movVrt == -1 then dirVal += 0b00001000		# Up
	if movVrt ==  1 then dirVal += 0b00010000		# Down
	if movHrz == -1 then dirVal += 0b00100000		# Left
	if movHrz ==  1 then dirVal += 0b01000000		# Right
	i := ship-test
	i += dirVal
	# Draw
	sprite shipX shipY 8
;


# Handle ship weapons fire
: shipFire
	# Check for laser key press
	laserTemp := fireLaserKey
	if laserTemp key then shipLaser
	# Possible additional weapons
		# Mines
		# Rockets
		# Horizontal laser
;


# Fire ship laser
: shipLaser
	# Check cooldown timer and return if not finished
	laserTemp := delay
	if laserTemp != 0 then return
	# Don't fire when ship is at top of screen
	if shipY == 0 then return
	# Set starting vertical position for laser
	laserY := shipY
	# Adjust position one pixel down
	laserY += 1
	# Clear collision pattern
	lsrHitPtrn := 0b00000000
	# Set i to single dot
	i := pixel-20
	
	# Draw laser one pixel at a time
	loop
		# Move position one pixel up
		laserY -= 1
		# Draw
		sprite shipX laserY 1
		
		# Put collision flag into LSB of hit pattern register
		lsrHitPtrn |= vf
		# Build pattern by shifting left
		# 0000 0xxx too low, keep checking
		# 0000 1000 Catch rock, delete
		# 0000 1010 Shoot rock, delete
		# 0000 1100 Dodge rock, stop laser
		# 0000 1110 reserved, error
		lsrHitPtrn <<= lsrHitPtrn
		# Check for valid collision pattern
		jump0 laserHitTable
		# Match collision pattern
		: laserHitTable
			jump continueLaser	#  0 Too soon
			jump continueLaser	#  2 .
			jump continueLaser	#  4 .
			jump continueLaser	#  6 .
			jump svcLaserHit		#  8 Catch type (destroy and - points)
			jump svcLaserHit		# 10 Shoot type (destroy and + points)
			jump clearLaser			# 12 Dodge type (stops laser)
			jump handleError		# 14 Error
		
		: continueLaser
		# Continue drawing laser until top of screen is reached
		if laserY != 0 then
	again
	
	
	: clearLaser
	# Delay before erasing laser
	# Otherwise it flashes too fast to see
	# Balance between visibility and causing lag
	laserTemp := laserViewTime
	delay := laserTemp
	loop
		laserTemp := delay
		if laserTemp != 0 then
	again
	
	# Erase laser
	laserTemp := shipY
	laserTemp += 1
	loop
		laserTemp -= 1
		sprite shipX laserTemp 1
		if laserTemp != laserY then
	again
	
	# Reset cooldown timer
	laserTemp := laserLimit
	delay := laserTemp
;


: svcLaserHit
	# Save laser X and Y
	#i := weapon-registers
	#save v2
	# Copy laserY value
	lsrHitY := laserY
	# Rocks use an offset of 224 ( 64 * 5 ) their actual location doesn't change
	# Additional offset of -1 required to match Y value of rock
	lsrHitY += 223
	# Second value to check depending on rock geometry
	lsrHitY2 := lsrHitY
	# Match hit pattern to rock type
	if lsrHitPtrn == 0b00001010 begin
		# Shoot rocks 0b00001010
		# This rock type requires check of second value
		lsrHitY2 += 1
		# Create i := [array addr] instruction
		:unpack 0xA shoot-xys
	else
		# Catch rocks 0b00001000
		# Create i := [array addr] instruction
		:unpack 0xA catch-xys
	end
	
	# v0 and v1 contain an instruction
	# Set i to location instruction is needed
	i := hitSeti 		
	# Save instruction there
	save v1

	# Search the array for rock that was hit
	svcLaserHitX

	# Restore laser X and Y
	#i := weapon-registers
	#load v2
	# Restore i
	i := pixel-20
	# Continue
	jump clearLaser


# Second half of function
: svcLaserHitX
	# Load rock registers
	i := rock-registers
	load v5
	# Set i to XY array for hit rock type
	: hitSeti 0x00 0x00	
	# Amount to increase i for each array element
	rockIndex := 2
	# Amount to increase i to locate sprite for current rock type
	rockOffset := 32
	# Iterate array elements until we find a match
	loop
		# Load X into v0 and Y into v1
		load v1
		# Check if this is the correct rock
		# Two values to check for some rock types
		if rockY == lsrHitY then jump hitThisRock			# If match on value 1 process hit, otherwise check value 2
		if rockY != lsrHitY2 then jump hitNextRock    # If no match on value 2, check next rock
																									# If match on value 2 continue with hit process
		: hitThisRock
		# Found rock, copy rockY value before clearing
		rockOldY := rockY		
		# Clear and save rockY before changing i
		rockY := 0
		save v1
		# Increment i by rockOffset to locate sprite for this rock type
		i += rockOffset
		# Draw over rock to erase
		sprite rockX rockOldY 4
		# Flag new rock for spawn and save value
		rksNeeded += 1
		i := rock-registers
		save v5
		# Done here
		return
		
		# Prepare to check next array slot
		: hitNextRock
		# Increment to next element
		i += rockIndex
		# Decrement offset
		rockOffset -= 2
		# Check if end of array
		if rockIndex != maxRckIndex then
	again
;






























# Blink thruster flame when up arrow is pressed
: shipThrust
	i := flame
	
	# Erase flame if visible
	if flameState == 1 begin
		flameState := 0
		sprite shipX shipY 8
		# Return now to keep flame off a little longer
		return
	end
		
	# Check for up key (movement registers not loaded)
	v0 := upKey
	if v0 -key then return
	# Draw flame
	flameState := 1
	sprite shipX shipY 8
;


			 ########
######## MISC ###############################################################
			 ########


: handleError
	# Clear screen and show error sprite
	clear
	i := error-sprite
	v0 := 4
	v1 := 4
	sprite v0 v1 5
	loop
		# Just stop in this infinite loop
	again


			 ########
######## DATA ###############################################################
			 ########


# Base ship sprite and xor directional versions
: ship-test
	0x00 0x20 0x20 0x70 0x00 0x00 0x00 0x00
: ship-test-up
	0x00 0x20 0x00 0x50 0x70 0x00 0x00 0x00
: ship-test-down
	0x20 0x00 0x50 0x70 0x00 0x00 0x00 0x00
: ship-test-up-down-invalid
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
: ship-test-left
	0x00 0x30 0x30 0x48 0x00 0x00 0x00 0x00
: ship-test-up-left
	0x00 0x20 0x30 0x60 0x38 0x00 0x00 0x00
: ship-test-down-left
	0x10 0x30 0x18 0x70 0x00 0x00 0x00 0x00
: ship-test-up-down-left-invalid
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
: ship-test-right
	0x00 0x60 0x60 0x90 0x00 0x00 0x00 0x00
: ship-test-up-right
	0x00 0x20 0x60 0x30 0xE0 0x00 0x00 0x00
: ship-test-down-right
	0x40 0x60 0xC0 0x70 0x00 0x00 0x00 0x00
# Misc sprites
: flame
	0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x00
: error-sprite
	0xC0 0x80 0xC0 0x80 0xC0
: pixel-20
	0x20

: movement-registers
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
: rock-registers
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	
# Arrays to hold X/Y values of falling rocks
# Sprite data for matching rock type immediatly follows each array
: dodge-xys
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	: dodge-rock
	0x60 0x90 0xF0 0x60
: shoot-xys
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	: shoot-rock
	0x90 0x60 0x90 0x60
: catch-xys
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
	: catch-rock
	 0x00 0x00 0x00 0xe0
