# ship-test is base sprite
# others are base sprite offset and xor'd with base
# sprite position is updated before update
# so offset must be opposite of movement direction
# this erases current sprite and draws new on single line
# which eliminates flicker
: ship-test
	0x00 0x10 0x10 0x38 0x00 0x00 0x00
: ship-test-up
	0x00 0x10 0x00 0x28 0x38 0x00 0x00
: ship-test-down
	0x10 0x00 0x28 0x38 0x00 0x00 0x00
: ship-test-up-down-invalid
	0x00 0x00 0x00 0x00 0x00 0x00 0x00
: ship-test-left
	0x00 0x18 0x18 0x24 0x00 0x00 0x00
: ship-test-up-left
	0x00 0x10 0x18 0x30 0x1C 0x00 0x00
: ship-test-down-left
	0x08 0x18 0x0C 0x38 0x00 0x00 0x00
: ship-test-up-down-left-invalid
	0x00 0x00 0x00 0x00 0x00 0x00 0x00
: ship-test-right
	0x00 0x30 0x30 0x48 0x00 0x00 0x00
: ship-test-up-right
	0x00 0x10 0x30 0x18 0x70 0x00 0x00
: ship-test-down-right
	0x20 0x30 0x60 0x38 0x00 0x00 0x00
	
# Initial ship position
:const shipInitX	27
:const shipInitY	26

# Registers for ship movement
:alias shipx			v4
:alias shipy			v5
:alias movHrz			v6
:alias movVrt			v7
:alias dirVal			v8
:alias arrowCheck	v9
:alias keyLeft		va
:alias keyRight		vb
:alias keyUp			vc
:alias keyDown		vd

# Slow down movement of ship
: speedDlay
	v0 := 1																				# Set delay timer
	delay := v0																		#  for movement speed limiter
;

# Begin
: main
	initShip																			# Initialize ship
	speedDlay																			# Start delay timer
	
	# Primary program loop
	loop
		v0 := delay																	# Check
		if v0 != 0 then jump skipMove								#  delay timer
		# Delay timer finished
		speedDlay																		# Reset delay timer 
		# Check for arrow keys and move ship
		moveShip
		: skipMove				
		# Non-speed limited operations here	
		# Clear registers for testing
		clearRegs
	again
	
	: initShip
		# Registers
		shipx				:= shipInitX
		shipy				:= shipInitY
		movHrz			:= 0
		movVrt			:= 0
		dirVal			:= 0
		arrowCheck	:= 0
		keyLeft			:= 7
		keyRight		:= 9
		keyUp				:= 5
		keyDown			:= 8
		i := movement-registers
		save vd
		# Draw
		i := ship-test
		sprite shipx shipy 7
	;
	
	: moveShip
		# Load
		i := movement-registers
		load vd		
		# No horizontal arrow keys will result in a movement value of 0
		# Both horizontal keys will also result in a movement value of 0
		# One horizontal key will result in a movement vale of -1 or +1 (up or down)
		# Ditto for vertical: 0 or -1 or +1 (na or left or right)
		# Horizontal
		if vA key then movHrz += 255
		if vB key then movHrz += 1
		if movHrz != 0 then arrowCheck += 1
		# Vertical
		if vC key then movVrt += 255
		if vD key then movVrt += 1
		if movVrt != 0 then arrowCheck += 1
		# Return if no valid arrow key combination pressed
		# Will be zero for: no keys, all 4 keys, both vrt (no hrz), both hrz (no vrt)
		# Three key presses will cancel one direction out and behave as a single key
		# Single key presses will pass, as will two with one hrz / one vrt
		if arrowCheck == 0 then return
		# Calculate a value for current direction of the 8 possible
		# Value range is 0 - 15, with only 1,2,4,5,6,8,9,10 being valid
		# Empty sprites at 3 and 7 are required for proper offset functionality
		if movVrt == -1 then dirVal += 0b0001		# Up
		if movVrt ==  1 then dirVal += 0b0010		# Down
		if movHrz == -1 then dirVal += 0b0100		# Left
		if movHrz ==  1 then dirVal += 0b1000		# Right
		# Return if no valid arrow key combination pressed
		# Not needed here because of check performed above
		if dirVal == 0 then return
		# Use the direction value as an offset to sprite table
		# Add dirVal once for each byte in sprite
		i := ship-test
		i += dirVal
		i += dirVal
		i += dirVal
		i += dirVal
		i += dirVal
		i += dirVal
		i += dirVal
		# Update position: add or subtract 1 from one or both vars
		shipx += movHrz
		shipy += movVrt
		# Draw
		sprite shipx shipy 7
		# Save registers 0 - 5
		# 0,1,2,3 are not used in this routine
		# 6,7,8,9,a,b,c,d are reset to default at top of routine
		# 4 and 5 hold the current position and need to be saved
		i := movement-registers
		save v5
	;
	
	: clearRegs
		v0 := 0
		v1 := 0
		v2 := 0
		v3 := 0
		v4 := 0
		v5 := 0
		v6 := 0
		v7 := 0
		v8 := 0
		v9 := 0
		va := 0
		vb := 0
		vc := 0
		vd := 0
		ve := 0
		vf := 0
	;
	
	: movement-registers
	0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00